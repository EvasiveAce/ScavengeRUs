@model IEnumerable<ScavengeRUs.Models.Entities.Hunt>

@{
    ViewData["Title"] = "Hunts";
}

<h1>Hunt Display</h1>


<p>
    <a asp-action="Create" style="padding-right: 3px">Create New Hunt</a> |
    <a asp-controller="locations" asp-action="Index" style="padding-right: 3px">Manage All Tasks</a> |
    <a asp-controller="User" asp-action="Manage" style="padding-left: 3px">Back to Admin Portal</a>
</p>

<p>
    <button id="All">All</button>
    <button id="Active">Active</button>
    <button id="Pending">Pending</button>
    <button id="Ended">Ended</button>
</p>

<table class="table" id="huntTable">
    <thead>
        <tr>
@*            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.CreationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HuntName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                Status
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Players)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HuntLocations)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
@*            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>  *@   
            <td>
                @Html.DisplayFor(modelItem => item.CreationDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HuntName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>
            <td>
                    @{
                        // see the commented code below to see why this var is set up this way, even though you don't necessarily need it this way in this version of the project
                        var timeRemaining = (item.EndDate - DateTime.Now).ToString();
                        if (item.StartDate < DateTime.Now || item.EndDate < DateTime.Now)
                        {
                            timeRemaining = "Ended";
                        }
                        if (item.StartDate > DateTime.Now)
                        {
                            timeRemaining = "Pending";
                        }
                        if (item.EndDate > DateTime.Now && item.StartDate < DateTime.Now)
                        {
                            timeRemaining = "Active";
                            // below would display the time remaining, but we are choosing to not use it.
                            // timeRemaining = timeRemaining.Substring(0, timeRemaining.LastIndexOf("."));
                        }
 
                }
                    @Html.DisplayFor(modelItem => timeRemaining)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Players.Count)
             </td>
            <td>
                @Html.DisplayFor(modelItem => item.HuntLocations.Count)
            </td>
            <td>
 @*                the edit link will only be active for pending or active hunts (the url to edit ended hunts does still exist, but all fields are read-only) *@
                    @if (item.StartDate > DateTime.Now || item.EndDate > DateTime.Now)
                    {
                        @Html.ActionLink("Edit", "Update", new      { id=item.Id })
                        <nobr>|</nobr>
                    }
                    @Html.ActionLink("View Hunt", "ViewTasks", new {  id=item.Id  }) |
                @Html.ActionLink("Delete Hunt", "Delete", new {  id=item.Id  })
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts{
    <script src="~/js/huntIndex.js"></script>
}